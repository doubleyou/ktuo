@title Welcome to the KTUO JSON Application
@doc

<p>
This application provides a straitforward and easy way to handle JSON encoding and decoding. The relevent modules are ktj_encode and ktj_decode. ktj_encode will encode json into an IO list while ktj_parse will decode lists or binaries.
</p>

<p>
It expects to have a complete
json expression available in the stream. If more then
on json expression is in the stream it will parse one expression
and return the result and the rest of the stream which you may then
call parse on again. If a failure occures. it will return a error
value of the form {error, {Reason, Line, Char}}.
</p>

<p>
Here are a few examples that you can try in your repl.

<pre>
Erlang (BEAM) emulator version 5.6.3 [source] [smp:2] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.6.3  (abort with ^G)
1> ktj_parse:parse("[1,2,3]").
{[1,2,3],[],{0,7}}
2> X = ktj_parse:parse("[1,2,3]").
{[1,2,3],[],{0,7}}
3> ktj_parse:parse(X).
end_of_stream
4> J = ktj_parse:parse("[1,2,3][4,5,6]").
{[1,2,3],"[4,5,6]",{0,7}}
5> ktj_parse:parse(J).
{[4,5,6],[],{0,14}}
6> Z = ktj_parse:parse(J).
{[4,5,6],[],{0,14}}
7> ktj_parse:parse(Z).
end_of_stream
8>
</pre>
</p>
@author Eric Merritt
@copyright 2007, 2008 Erlware
